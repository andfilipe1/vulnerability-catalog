from django.db import models
from datetime import date


PERIMETER_CHOICES = (
    (u'Internal', u'Internal'),
    (u'External', u'External'),
)

RISK_CHOICES = (
    (u'High', u'High'),
    (u'Medium', u'Medium'),
    (u'Low', u'Low'),
)

STATUS_CHOICES = (
    (u'Solved', u'Solved'),
    (u'Notified', u'Notified'),
    (u'Accepted', u'Accepted'),
    (u'Mitigated', u'Mitigated'),
    (u'Unknow', u'Unknow'),
)

class Vulnerability(models.Model):
    class Meta:
        verbose_name_plural = "vulnerabilities"

    system = models.CharField(max_length=64, \
             help_text="The system which has the vulnerability.")
    owner = models.CharField(max_length=64, \
            help_text="The system owner or responsible.")
    owner_email = models.EmailField(max_length=64)
    environment = models.CharField(max_length=64, \
                  help_text="Ex: Datacenter, Local server, Cloud, etc.")
    perimeter = models.CharField(max_length=8, choices=PERIMETER_CHOICES)
    technology = models.CharField(max_length=64, \
                 help_text="Ex: ASP.NET, Joomla, PHP, Java, Apache, etc.")
    system_type = models.CharField(max_length=64, \
             help_text="WEB application, Windows Server, Linux Server, Mobilie application, etc.")
    vulnerability = models.CharField(max_length=64, \
          help_text="The vulnerability name, as reported by the researchers.")
    category = models.CharField(max_length=64, \
               help_text="Please, refer to https://www.owasp.org/index.php/Category:Vulnerability for a list of such categories.")
    synopsis = models.CharField(max_length=256, help_text="Short description of the vulnerability. Hint: try to focus in the risks associated with the vulnerability.")
    cvss_score = models.IntegerField(default=0, help_text="Please, refer to https://www.first.org/cvss/calculator/3.0 to calculate it properly.")
    identification_date = models.DateField()
    source_report = models.CharField(max_length=256, default="", blank=True, help_text="Optional. The company, research team or pentester which found the vulnerability.")
    risk = models.CharField(max_length=6, choices=RISK_CHOICES)
    observation = models.CharField(max_length=256, default="", blank=True, help_text="Optional. Any observation pointed by the researcher when comment this vulnerability.")
    remediation = models.CharField(max_length=256, default="", blank=True, help_text="Optional. The remediation suggested by the researchers or the action taken against the vulnerability.")
    risk_acceptance_reason = models.CharField(max_length=256, default="", blank=True, help_text="Optional. A justification, case your team decides to accept the risks related to this vulnerability.")
    remediation_deadline = models.DateField()
    status = models.CharField(max_length=9, choices=STATUS_CHOICES)
    report_file = models.CharField(max_length=64, default="", blank=True, help_text="Optional. The report file for further reference.")
    report_page = models.IntegerField(default=0, blank=True, help_text="Optional. The report page number which describes the vulnerabity.")

    def remediation_time_remaining(self):
        """Count the remaining time between remediation deadline and now."""   
        """If it returns a negative number, remediation_deadline has passed."""
        now = date.today()
        tmp = Vulnerability.objects.get(pk=self.id)
        deadline = tmp.remediation_deadline
        elapsed_time = deadline - now
        return (elapsed_time.days)
