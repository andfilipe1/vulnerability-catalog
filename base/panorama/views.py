from django.shortcuts import render

# Create your views here.
from django.shortcuts import get_object_or_404, render
from django.http import HttpResponse, HttpResponseNotFound
from django.urls import reverse
from django.views import generic
from django.db.models import Count

import pandas

from catalog.models import Vulnerability

class PanoramaView(generic.ListView):
    model = Vulnerability
    template_name = 'panorama/index.html'

def graph(request):
    return render(request, 'panorama/graph.html')

def barchart(request):
    return render(request, 'panorama/bargraph.html')

def piechart(request):
    return render(request, 'panorama/piechart.html')

def dashboard(request):
    return render(request, 'panorama/dashboard.html')


#### JSON creation tests data:
def countField(request, field=None, countby=None):
    """ Usage: 127.0.0.1:8000/panorama/count/?field=<field_name>"""
    """ Returns a JSON with the counting of the Vulnerability model data."""
    """ field_name is one of the following allowed_fields: """
 
    allowed_fields = ['system', 'owner', 'enviromnent', \
                      'perimeter', 'technology', 'system_type', \
                      'vulnerability', 'category', 'cvss_score', \
                      'identification_date', 'risk', 'remediation_deadline', \
                      'status']

    field = request.GET.get('field')
    countby =  request.GET.get('countby')
    #### single field match:
    if field in allowed_fields and not countby:
        data = Vulnerability.objects \
                            .values(field) \
                            .annotate(vuls=Count('id'))
        return HttpResponse(list(data))

    #### double field match:
    if field and countby in allowed_fields:
        data = Vulnerability.objects \
                            .values(field, countby) \
                            .annotate(vuls=Count(countby))

        data  = list(data)
        df = pandas.DataFrame.from_dict(data)
        result = [{field: k, countby: g.set_index(countby).vuls.to_dict()} \
        for k, g in df.groupby(field)]

        return HttpResponse(str(result))
        

    return HttpResponseNotFound('<h1>404. No such a field. \
                                Please, check the values of \
                                 \'filter\' and \'countby=\' you \
                                are passing at URL.</h1>')   

####
