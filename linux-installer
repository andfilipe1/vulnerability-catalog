#!/bin/bash

checkparameters() {
  #### Check stdin parametes to decide what to do:
  if [[ $1 == "templatesonly" ]]; then
    cd $base_dir/$project_name
    settemplates
    exit
  fi

  if [[ $1 == "urlsviews" ]]; then
    cd $base_dir/$project_name
    set_urls_views    
    exit
  fi
}

cleaning_old() {
  #### Cleaning previous project versions.
  if [[ -d $project_name ]]; then
    rm -rf $project_name
  fi
}

check_system_reqs() {
  #### Checks system requirements to produce the package:
  control="True"
  #### System requirements:
  #### python3 https://wiki.python.org/moin/Python2orPython3
  if [[ ! $(type -t python3) ]]; then
    echo
    echo "[Warning]    Missing python3."
    echo
    echo "Please, install python3 first."
    echo

    have_python="False"
  fi
  #### pip3 https://wiki.python.org/moin/Python2orPython3
  if [[ ! $(type -t pip3) ]]; then
    echo
    echo "[Warning]    Missing pip3."
    echo
    echo "Please, install pip3 first."
    echo

    have_pip="False"
  fi

  if [[ $have_python || $have_pip == "False" ]]; then
    echo
    echo "Fix system dependencies first. Exiting."
    exit 1
  fi

  #### django (2.0) https://docs.djangoproject.com
  if [[ ! $(type -t django-admin) ]]; then
    echo
    echo "[Warning]    Missing django2 (or greater)."
    echo
    echo "Fix it by running:"
    echo "    pip3 install django==2"
    echo
    control="False"
  else
    if [[ $(django-admin --version) != "2.0" ]]; then
      echo
      echo "[Warning]    django version is not 2 (or greater)."
      echo
      echo "Fix it by running:"
      echo "    pip3 install django==2"
      echo 
    fi
  fi
  #### django-chartjs (1.2)  https://github.com/novagile/django-chartjs
  if [[ ! $(pip3 show django-chartjs) ]]; then
    echo
    echo "[Warning]    Missing django-chartjs 1.2 (or greater)."
    echo
    echo "Fix it by running:"
    echo "    pip3 install django-chartjs==1.2"
    echo
    control="False"
  fi
  
  if [[ $control == "False" ]]; then
    echo "Missing django dependencies. Exiting."
    exit 1
  fi
}

start_project() {
  #### Starts the project construction:
  django-admin startproject $project_name
  cd $project_name
}

start_app() { 
  #### Starting the new $app_name app into the project:
  python3 manage.py startapp $app_name
}

set_project_urls() {
  #### Set the project urls into the main project from metadata template:
  url_tmpl_file=$base_dir/metadata/urls/admin/urls.py
  cp $url_tmpl_file $project_name/urls.py
}

add_app_to_project() { 
  #### Add $app_name into the main project:
  _class_app_name_config_=$(echo $app_name | sed -e 's/\b\(.\)/\u\1/g')Config # Class names start by uppercase.
  _str_="'$app_name.apps.$_class_app_name_config_'," 
  sed -i -e "/INSTALLED_APPS/a \    $_str_" $project_name/settings.py # inserting above 'urlpatters' line.
}

defining_datamodel(){ 
  #### Apply Django's data model from metadata template:
  models_dir=$app_name
  models_file=$models_dir/models.py
  models_tmpl_file=$base_dir/metadata/models/$app_name/models.py
  
  cp $models_tmpl_file $models_file
}

set_app_urls(){ 
  #### Apply urls.py settings from metadata template:
  url_tmpl_file=$base_dir/metadata/urls/$app_name/urls.py
  
  cp $url_tmpl_file $app_name/urls.py
}

set_app_views() {
  #### Apply all views settings from metadata template:
  views_tmpl_dir=$base_dir/metadata/views/$app_name/
  cp $views_tmpl_dir/* $app_name/
}

set_data_models(){
  #### Enabling DATAMODEL into admin app:
  #### vulnerabilities/admin.py
  admin_tmpl_file=$base_dir/metadata/models/$app_name/admin.py
  cp $admin_tmpl_file  $app_name/admin.py
}

set_catalog_index_template() {
  ### Apply the desired template from metadata:
  #### Templates:
  tmpl_source_dir=$base_dir/metadata/templates/$app_name
  tmpl_dir=$app_name/templates/$app_name
  if [[ ! -d $tmpl_dir ]]; then
      mkdir -p $tmpl_dir
  fi
  
  tmpl_file=$tmpl_dir/index.html
  cp $tmpl_source_dir/tmpl_index_table.html $tmpl_file
  
  ### Creates the catalog app's index table: 
  sed -e "s/__APP_NAME__/$app_name/g" -e '/__INSERT_CUSTOM_CONTENT__/ {' -e "r $tmpl_source_dir/index_table.html" -e 'd' -e '}' $tmpl_source_dir/tmpl_main.html > $tmpl_file
}

set_catalog_home_template() {
  ### Apply the desired template from metadata:
  #### Templates:
  tmpl_source_dir=$base_dir/metadata/templates/$app_name
  tmpl_dir=$app_name/templates/$app_name
  if [[ ! -d $tmpl_dir ]]; then
      mkdir -p $tmpl_dir
  fi
  
  tmpl_file=$tmpl_dir/home.html
  cp $tmpl_source_dir/tmpl_home_table.html $tmpl_file
  
  ### Creates $app_name Home content (tables): 
  sed -e "s/__APP_NAME__/$app_name/g" -e '/__INSERT_CUSTOM_CONTENT__/ {' -e "r $tmpl_source_dir/home_table.html" -e 'd' -e '}' $tmpl_source_dir/tmpl_main.html > $tmpl_file
}

set_catalog_detail_template() {
  ### Apply the desired template from metadata:
  #### Templates:
  tmpl_source_dir=$base_dir/metadata/templates/$app_name
  tmpl_dir=$app_name/templates/$app_name
  if [[ ! -d $tmpl_dir ]]; then
      mkdir -p $tmpl_dir
  fi
  
  tmpl_file=$tmpl_dir/detail.html
  cp $tmpl_source_dir/tmpl_detail_table.html $tmpl_file
  
  ### Creates $app_name Detail content (tables):
  sed -e "s/__APP_NAME__/$app_name/g" -e '/__INSERT_CUSTOM_CONTENT__/ {' -e "r $tmpl_source_dir/detail_table.html" -e 'd' -e '}' $tmpl_source_dir/tmpl_main.html > $tmpl_file
}

set_panorama_index_template() {
  ### Apply the desired template from metadata:
  #### Templates:
  view_name=panorama
  tmpl_source_dir=$base_dir/metadata/templates/$view_name
  tmpl_dir=$app_name/templates/$view_name
  if [[ ! -d $tmpl_dir ]]; then
      mkdir -p $tmpl_dir
  fi
  
  tmpl_file=$tmpl_dir/index.html
  cp $tmpl_source_dir/tmpl_index_table.html $tmpl_file
  
  ### Creates $app_name Index content (table): 
  sed -e "s/__APP_NAME__/$app_name/g" -e '/__INSERT_CUSTOM_CONTENT__/ {' -e "r $tmpl_source_dir/index_table.html" -e 'd' -e '}' $tmpl_source_dir/tmpl_main.html > $tmpl_file
}

set_data_index_template() {
  ### Apply the desired template from metadata:
  #### Templates:
  view_name=data
  tmpl_source_dir=$base_dir/metadata/templates/$view_name
  tmpl_dir=$app_name/templates/$view_name
  if [[ ! -d $tmpl_dir ]]; then
      mkdir -p $tmpl_dir
  fi
  
  tmpl_file=$tmpl_dir/index.html
  cp $tmpl_source_dir/tmpl_index_table.html $tmpl_file
  
  ### Creates Catalog Data content (table): 
  sed -e "s/__APP_NAME__/$app_name/g" -e '/__INSERT_CUSTOM_CONTENT__/ {' -e "r $tmpl_source_dir/index_table.html" -e 'd' -e '}' $tmpl_source_dir/tmpl_index_table.html > $tmpl_file
}


set_panorama_detail_template() {
  ### Apply the desired template from metadata:
  #### Templates:
  tmpl_source_dir=$base_dir/metadata/templates/$app_name
  tmpl_dir=$app_name/templates/$app_name
  if [[ ! -d $tmpl_dir ]]; then
      mkdir -p $tmpl_dir
  fi
  
  tmpl_file=$tmpl_dir/detail.html
  cp $tmpl_source_dir/tmpl_detail_table.html $tmpl_file
  
  ### Creates $app_name Detail content (table):
  sed -e "s/__APP_NAME__/$app_name/g" -e '/__INSERT_CUSTOM_CONTENT__/ {' -e "r $tmpl_source_dir/detail_table.html" -e 'd' -e '}' $tmpl_source_dir/tmpl_main.html > $tmpl_file
}

set_catalog_add_template() {
  ### Apply the desired template from metadata:
  #### Adding vulnerabilities page:
  #### Templates:
  tmpl_source_dir=$base_dir/metadata/templates/$app_name
  tmpl_dir=$app_name/templates/$app_name
  if [[ ! -d $tmpl_dir ]]; then
      mkdir -p $tmpl_dir
  fi
  
  tmpl_file=$tmpl_dir/add.html
  cp $tmpl_source_dir/tmpl_add_table.html $tmpl_file

  ### Creates $app_name Add vulnerability content (table): 
  sed -e "s/__APP_NAME__/$app_name/g" -e '/__INSERT_CUSTOM_CONTENT__/ {' -e "r $tmpl_source_dir/add_table.html" -e 'd' -e '}' $tmpl_source_dir/tmpl_add_table.html > $tmpl_file

  ### Inserting cvss calculator code properly:
#  sed -i -e '/__INSERT_CVSS_CALCULATOR__/ {' -e "r $tmpl_source_dir/cvss-3.0-calculator.html" -e 'd' -e '}' $tmpl_file
}

set_catalog_update_template() {
  ### Apply the desired template from metadata:
  #### Adding vulnerabilities page:
  #### Templates:
  tmpl_source_dir=$base_dir/metadata/templates/$app_name
  tmpl_dir=$app_name/templates/$app_name
  if [[ ! -d $tmpl_dir ]]; then
      mkdir -p $tmpl_dir
  fi
  
  tmpl_file=$tmpl_dir/update.html
  cp $tmpl_source_dir/tmpl_update_table.html $tmpl_file

  ### Creates $app_name Add vulnerability content (table): 
  sed -e "s/__APP_NAME__/$app_name/g" -e '/__INSERT_CUSTOM_CONTENT__/ {' -e "r $tmpl_source_dir/update_table.html" -e 'd' -e '}' $tmpl_source_dir/tmpl_update_table.html > $tmpl_file
}

set_catalog_delete_template() {
  ### Apply the desired template from metadata:
  #### Adding vulnerabilities page:
  #### Templates:
  tmpl_source_dir=$base_dir/metadata/templates/$app_name
  tmpl_dir=$app_name/templates/$app_name
  if [[ ! -d $tmpl_dir ]]; then
      mkdir -p $tmpl_dir
  fi
  
  tmpl_file=$tmpl_dir/delete.html
  cp $tmpl_source_dir/tmpl_delete_table.html $tmpl_file

  ### Creates $app_name Add vulnerability content (table): 
  sed -e "s/__APP_NAME__/$app_name/g" -e '/__INSERT_CUSTOM_CONTENT__/ {' -e "r $tmpl_source_dir/delete_table.html" -e 'd' -e '}' $tmpl_source_dir/tmpl_delete_table.html > $tmpl_file
}

set_login_template() {

  #### Templates:
  tmpl_source_dir=$base_dir/metadata/templates/$app_name
  tmpl_dir=$app_name/templates/$app_name
  if [[ ! -d $tmpl_dir ]]; then
      mkdir -p $tmpl_dir
  fi

  tmpl_file=$tmpl_dir/login.html
  cp $tmpl_source_dir/login.html $tmpl_file
}

set_catalog_forms() {
    #### Ensures all catalog forms in forms.py were addressed properly:
    forms_source_dir=$base_dir/metadata/forms/$app_name
    forms_file=forms.py

    cp $forms_source_dir/$forms_file $app_name/$forms_file
}

set_catalog_static_files() {
    #### Put all static content into app structure:
    static_source_dir=$base_dir/metadata/static/$app_name
    static_dst_dir=$app_name/static

    cp -fr $static_source_dir $static_dst_dir
}


set_admin_template() {
  ####_FIX_ to use templates?
  #### Changing default admin session:
  tmpl_dir=./templates/admin
  if [[ ! -d $tmpl_dir ]]; then
      mkdir -p $tmpl_dir
  fi
  tmpl_file=$tmpl_dir/base_site.html
  touch $tmpl_file
  
  #### Setting $project_name/settings.py file:
  _str_="'DIRS': \[\]" 
  _str2_="'DIRS': \[os.path.join(BASE_DIR, 'templates')\]"
  sed -i -e "s/$_str_/$_str2_/" $project_name/settings.py
  
  #### base_site.html
  python_path=$(python3 -c "import django; print(django.__path__[0])")
  cp $python_path/contrib/admin/templates/admin/base.html $tmpl_dir
  cp $python_path/contrib/admin/templates/admin/base_site.html $tmpl_file
  
  #### Changing admin's banner name:
  sed -i -e '/site-name/d' $tmpl_file
  _str_="<h1 id=\"site-name\"><a href=\"{% url 'admin:index' %}\">Catalog administration</a></h1>"
  sed -i -e "/block branding/a \ $_str_" $tmpl_file
}

apply_data_models() { # pass app_name as a parameter.
  #### Applying the new data model:
  python3 manage.py makemigrations $app_name
  python3 manage.py sqlmigrate $app_name 0001
  python3 manage.py migrate
}

deployment_checklist(){
  #### Ensuring https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/ requirements:
  #### Changing SECRET_KEY:
  echo "Generating secret key..."
  key=$(dd bs=4096 count=20 iflag=fullblock if=/dev/urandom 2>/dev/null | sha512sum | awk '{print $app_name}')
  #key=$(dd bs=4096 count=5 if=/dev/urandom 2> /dev/null | strings | tr -d "\'" | tr -d '\"' | tr -d '\`' | tr '\n' ' ')
  _str_="SECRET_KEY = '$key'"
  sed -i -e "s/^SECRET_KEY.*/$_str_/" $project_name/settings.py
  
  #### ALLOWED_HOSTS:
  _str_="ALLOWED_HOSTS = ['localhost', '127.0.0.1']"
  sed -i -e "s/^ALLOWED_HOSTS.*/$_str_/" $project_name/settings.py
}

create_test_enviroment() { # pass app_name as a parameter.
  #### Enable test capabilities to the project.
  app_name=$app_name
  if [[ ! -d $app_name/fixturename ]]; then
     mkdir -p $app_name/fixturename
  fi
  cp $base_dir/test/data/initialcatalogdata.json $app_name/fixturename/
  python3 manage.py loaddata $app_name/fixturename/initialcatalogdata.json
}

create_superuser() {
  #### Set admin and start server:
  python3 manage.py createsuperuser
}
  
run_new_project() {
  echo
  echo
  echo "Please access http://127.0.0.1:8000/admin to start app."
  
  python3 manage.py runserver
}

settemplates() {
  ####
  #### Set templates and forms properly if you need to run it isolated:
 
  #### Admin template 
  set_admin_template # no parameters are need.

  #### Catalog template config
  set_catalog_index_template # no parameters need.
  set_catalog_detail_template # no parameters need.
  #### Add vulnerability template config
  set_catalog_add_template # no parameters need.
  #### Update vulnerability template config
  set_catalog_update_template # no parameters need.
  #### Update vulnerability template config
  set_catalog_delete_template # no parameters need.
  #### Homepage template config
  set_catalog_home_template # no parameters need.
  
  #### Panorama template config
  set_panorama_index_template # no parameters need.
  #set_panorama_detail_template
  
  #### Data template config
  set_data_index_template # no parameters need.

  #### Login page template
  set_login_template
}

set_forms() {
  #### Forms (this should put forms.py properly):
  set_catalog_forms $app_name 
}

set_static_files() {  
  #### static files (https://docs.djangoproject.com/en/2.0/howto/static-files/):
  set_catalog_static_files $app_name 
}

create_project() {
  #### Running the project creation process:
  #### The first app in this list will be the catalog:
  
  #### Run it in this canonical order:
  #### Project configs
  start_project  # Must be the first to call
  start_app $app_name 
  set_project_urls # no parameters need.
  add_app_to_project # no parameters need.
  defining_datamodel # no parameters need.
}

set_urls_views() {  
  #### Apps configs
  set_app_urls $app_name 
  set_app_views $app_name 
}

finish_project() { 
  #### Final configs
  set_data_models $app_name 
  apply_data_models $app_name 
  deployment_checklist # no parameters need.
  create_superuser # no parameters need.
  create_test_enviroment $app_name 
}

#### Global variables:
project_name=base # catalog is a python module name, so we chose 'base' here.
app_name=catalog
base_dir=$(pwd)

checkparameters $* 

cleaning_old # no parameters need.
check_system_reqs # no parameters need.
create_project # no parameters need.
set_urls_views # no parameters need.
set_forms  # no parameters need.
set_static_files  # no parameters need.
settemplates  # no parameters need.
finish_project # no parameters need.
run_new_project # no parameters need.
