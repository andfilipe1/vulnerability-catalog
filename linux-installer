#!/bin/bash

####################### System properties.
checkparameters() {
  #### Check stdin parametes to decide what to do:
  if [[ $1 == "help" ]]; then
    echo -e "\nUsage: $0 <options>\n"
    echo -e "Options:\n"
    echo -e "$0 templatesonly: update project's templates only."
    echo -e "$0 urlsviews: update project' urls and views."
    echo -e "\n"
    exit
  fi

  if [[ $1 == "templatesonly" ]]; then
    cd $base_dir/$project_name
    settemplates
    set_static_files
    exit
  fi

  if [[ $1 == "urlsviews" ]]; then
    cd $base_dir/$project_name
    set_urls_views    
    exit
  fi
}

check_system_reqs() {
  #### Check system requirements to produce the package:
  control="True"
  #### System requirements:
  #### python3 https://wiki.python.org/moin/Python2orPython3
  if [[ ! $(type -t python3) ]]; then
    echo
    echo "[Warning]    Missing python3."
    echo
    echo "Please, install python3 first."
    echo

    have_python="False"
  fi
  #### pip3 https://wiki.python.org/moin/Python2orPython3
  if [[ ! $(type -t pip3) ]]; then
    echo
    echo "[Warning]    Missing pip3."
    echo
    echo "Please, install pip3 first."
    echo

    have_pip="False"
  fi

  if [[ $have_python || $have_pip == "False" ]]; then
    echo
    echo "Fix system dependencies first. Exiting."
    exit 1
  fi

  #### django (2.0) https://docs.djangoproject.com
  if [[ ! $(type -t django-admin) ]]; then
    echo
    echo "[Warning]    Missing django2 (or greater)."
    echo
    echo "Fix it by running:"
    echo "    pip3 install django==2"
    echo
    control="False"
  else
    if [[ $(django-admin --version) < 2 ]]; then
      echo
      echo "[Warning]    django version is not 2 (or greater)."
      echo
      echo "Fix it by running:"
      echo "    pip3 install django==2"
      echo 
    fi
  fi
  
  if [[ $control == "False" ]]; then
    echo "Missing django dependencies. Exiting."
    exit 1
  fi
}

cleaning_old() {
  #### Cleaning previous project versions.
  if [[ -d $project_name ]]; then
    rm -rf $project_name
  fi
}

####################### End of System properties.


####################### Django System properties.
start_django_project() {
  #### Starts the project construction:
  django-admin startproject $project_name
  cd $project_name

  #### Starting the new $app_name app into the project:
  python3 manage.py startapp $app_name
}

add_app_to_project() { 
  #### Add $app_name into the main project:
  #### Here just to make sure we are using the newest settings.py version.
  _class_app_name_config_=$(echo $app_name | sed -e 's/\b\(.\)/\u\1/g')Config # Class names start by uppercase.
  _str_="'$app_name.apps.$_class_app_name_config_'," 
  sed -i -e "/INSTALLED_APPS/a \    $_str_" $project_name/settings.py # inserting above 'urlpatters' line.
}
####################### End of Django System properties.

####################### App's datamodel properties.
defining_datamodel(){ 
  #### Apply Django's data model from metadata template:
  models_dir=$app_name
  models_file=$models_dir/models.py
  models_tmpl_file=$base_dir/metadata/models/$app_name/models.py
  
  rsync -av $models_tmpl_file $models_file
}

set_datamodel(){
  #### Enabling DATAMODEL into admin app:
  #### vulnerabilities/admin.py
  admin_tmpl_file=$base_dir/metadata/models/$app_name/admin.py
  rsync -av $admin_tmpl_file  $app_name/admin.py
}

apply_datamodel() { # pass app_name as a parameter.
  #### Applying the new data model:
  python3 manage.py makemigrations $app_name
  python3 manage.py sqlmigrate $app_name 0001
  python3 manage.py migrate
}
####################### End of App's datamodel properties.

####################### URLs properties.
set_project_urls() {
  #### Set the project urls into the main project from metadata template:
  url_tmpl_file=$base_dir/metadata/urls/admin/urls.py
  rsync -av $url_tmpl_file $project_name/urls.py
}

set_app_urls(){ 
  #### Apply urls.py settings from metadata template:
  url_tmpl_file=$base_dir/metadata/urls/$app_name/urls.py
  rsync -av $url_tmpl_file $app_name/urls.py
}
####################### End of URLs properties.

####################### App Views.
set_app_views() {
  #### Apply all views settings from metadata template:
  views_tmpl_dir=$base_dir/metadata/views/$app_name/
  rsync -av $views_tmpl_dir/* $app_name/
}
####################### End of App Views.


####################### Templates.

set_catalog_templates() {
#### Set pages using template files in metadata/template/catalog/
####
#### the tmpl_main.html is the common framework for all pages.
#### tmpl_<target>_table.html  are used when tmpl_main.html needs to be customized.
#### result_file is the file to be inserted into Django app (the files in the files array).
#### $target_table.html is the custom content to inserted into __INSERT_CUSTOM_CONTENT__ tag.
####
#### The idea is to create $target.html to be used as template_name in views.


files=('index.html' 'home.html' 'detail.html' 'add.html' 'update.html' 'delete.html' 'panorama.html', 'fastupdate.html', 'search.html')

  for i in $(echo ${files[*]}); do
    target=$(echo $i | awk -F"." '{print $1}')

    ### Apply the desired template from metadata:
    #### Templates:
    tmpl_source_dir=$base_dir/metadata/templates/$app_name
    tmpl_dir=$app_name/templates/$app_name
    if [[ ! -d $tmpl_dir ]]; then
        mkdir -p $tmpl_dir
    fi
    
    result_file=$tmpl_dir/$target.html
    rsync -av $tmpl_source_dir/tmpl_${target}_template.html $result_file
    
    ### Creates the catalog app's index table: 
    sed -e "s/__APP_NAME__/$app_name/g" \
        -e '/__INSERT_CUSTOM_CONTENT__/ {' \
        -e "r $tmpl_source_dir/${target}_custom_content.html" \
        -e 'd' \
        -e '}' $tmpl_source_dir/tmpl_main.html > $result_file
        ### This last line set every page to the same default layout.
        ### But notice it should be:
        ### -e '}' $tmpl_source_dir/tmpl_${target}_template.html > $result_file

  done
}


set_login_template() {

  #### Templates:
  tmpl_source_dir=$base_dir/metadata/templates/$app_name
  tmpl_dir=$app_name/templates/$app_name
  if [[ ! -d $tmpl_dir ]]; then
      mkdir -p $tmpl_dir
  fi

  tmpl_file=$tmpl_dir/login.html
  rsync -av $tmpl_source_dir/login.html $tmpl_file
}

set_admin_template() {
  ####_FIX_ to use templates?
  #### Changing default admin session:
  tmpl_dir=./templates/admin
  if [[ ! -d $tmpl_dir ]]; then
      mkdir -p $tmpl_dir
  fi
  tmpl_file=$tmpl_dir/base_site.html
  touch $tmpl_file
  
  #### Setting $project_name/settings.py file:
  _str_="'DIRS': \[\]" 
  _str2_="'DIRS': \[os.path.join(BASE_DIR, 'templates')\]"
  sed -i -e "s/$_str_/$_str2_/" $project_name/settings.py
  
  #### base_site.html
  python_path=$(python3 -c "import django; print(django.__path__[0])")
  rsync -av $python_path/contrib/admin/templates/admin/base.html $tmpl_dir
  rsync -av $python_path/contrib/admin/templates/admin/base_site.html $tmpl_file
  
  #### Changing admin's banner name:
  sed -i -e '/site-name/d' $tmpl_file
  _str_="<h1 id=\"site-name\"><a href=\"{% url 'admin:index' %}\">Catalog administration</a></h1>"
  sed -i -e "/block branding/a \ $_str_" $tmpl_file
}

set_artifacts_template() {
  #### Templates:
  tmpl_source_dir=$base_dir/metadata/templates/$app_name
  tmpl_dir=$app_name/templates/$app_name
  if [[ ! -d $tmpl_dir ]]; then
      mkdir -p $tmpl_dir
  fi
  
  tmpl_file=$tmpl_dir/cvss.html
  rsync -av $tmpl_source_dir/tmpl_add_template.html $tmpl_file

  ### Creates $app_name Add vulnerability content (table): 
  sed -e "s/__APP_NAME__/$app_name/g" \
      -e '/__INSERT_CUSTOM_CONTENT__/ {' \
      -e "r $tmpl_source_dir/cvss-3.0-calculator.html" \
      -e 'd' \
      -e '}' $tmpl_source_dir/tmpl_main.html > $tmpl_file
}

####################### End of Templates.

####################### Forms.
set_catalog_forms() {
  #### Ensures all catalog forms in forms.py were addressed properly:
  forms_source_dir=$base_dir/metadata/forms/$app_name
  forms_file=forms.py

  rsync -av $forms_source_dir/$forms_file $app_name/$forms_file
}
####################### End of Forms.

####################### Static files.
set_catalog_static_files() {
  #### Put all static content into app structure:
  static_source_dir=$base_dir/metadata/static/$app_name
  static_dst_dir=$app_name/static

  rsync -av $static_source_dir $static_dst_dir
}
####################### End of  files.

####################### Django deploy.
deployment_checklist(){
  #### Ensuring https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/ requirements:
  #### Changing SECRET_KEY:
  echo "Generating secret key..."
  key=$(dd bs=4096 count=20 iflag=fullblock if=/dev/urandom 2>/dev/null | sha512sum | awk '{print $app_name}')
  _str_="SECRET_KEY = '$key'"
  sed -i -e "s/^SECRET_KEY.*/$_str_/" $project_name/settings.py
  
  #### ALLOWED_HOSTS:
  _str_="ALLOWED_HOSTS = ['localhost', '127.0.0.1']"
  sed -i -e "s/^ALLOWED_HOSTS.*/$_str_/" $project_name/settings.py
}

create_test_enviroment() { # pass app_name as a parameter.
  #### Enable test capabilities to the project.
  app_name=$app_name
  if [[ ! -d $app_name/fixturename ]]; then
     mkdir -p $app_name/fixturename
  fi
  rsync -av $base_dir/test/data/initialcatalogdata.json $app_name/fixturename/
  python3 manage.py loaddata $app_name/fixturename/initialcatalogdata.json
}

create_superuser() {
  #### Set admin and start server:
  python3 manage.py createsuperuser
}
  
####################### End of Django deploy.


####################### Run it.
run_new_project() {
  echo
  echo
  echo "Please access http://127.0.0.1:8000/admin to start app."
  
  python3 manage.py runserver
}
####################### End of Run it.

settemplates() {
  ####
  #### Set templates and forms properly if you need to run it isolated:
  #### Catalog template config
  set_catalog_templates # no parameters need.
 
  #### Admin template 
  set_admin_template # no parameters are need.
  
  #### Login page template
  set_login_template

  #### Artifacts template
  set_artifacts_template
}

set_forms() {
  #### Forms (this should put forms.py properly):
  set_catalog_forms $app_name 
}

set_static_files() {  
  #### static files (https://docs.djangoproject.com/en/2.0/howto/static-files/):
  set_catalog_static_files $app_name 
}

create_project() {
  #### Running the project creation process:
  #### The first app in this list will be the catalog:
  
  #### Run it in this canonical order:
  #### Project configs
  start_django_project  # Must be the first to call
  set_project_urls # no parameters need.
  add_app_to_project # no parameters need.
  defining_datamodel # no parameters need.
}

set_urls_views() {  
  #### Apps configs
  set_project_urls
  set_app_urls $app_name 
  set_app_views $app_name 
}

finish_project() { 
  #### Final configs
  defining_datamodel $app_name
  set_datamodel $app_name 
  apply_datamodel $app_name 
  deployment_checklist # no parameters need.
  create_superuser # no parameters need.
  create_test_enviroment $app_name 
}

#### Global variables:
project_name=base # catalog is a python module name, so we chose 'base' here.
app_name=catalog
base_dir=$(pwd)

checkparameters $* 

cleaning_old # no parameters need.
check_system_reqs # no parameters need.
create_project # no parameters need.
set_urls_views # no parameters need.
set_forms  # no parameters need.
set_static_files  # no parameters need.
settemplates  # no parameters need.
finish_project # no parameters need.
run_new_project # no parameters need.
