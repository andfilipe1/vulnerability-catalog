from django.db import models
from datetime import date, timedelta

PERIMETER_CHOICES = (
    ('Internal', 'Internal'),
    ('External', 'External'),
)

RISK_CHOICES = (
    ('High', 'High'),
    ('Medium', 'Medium'),
    ('Low', 'Low'),
)

STATUS_CHOICES = (
    ('Solved', 'Solved'),
    ('Notified', 'Notified'),
    ('Accepted', 'Accepted'),
    ('Mitigated', 'Mitigated'),
    ('Not identified', 'Not identified'),
)

class Vulnerability(models.Model):
    #### Vulnerability fields:
    system = models.CharField(max_length=64, blank=False, \
        help_text="The system presenting the vulnerability.")
    system_type = models.CharField(max_length=64, blank=False, \
        help_text="Ex: WEB application, Windows Server, Linux Server, Mobilie application, etc.")
    technology = models.CharField(max_length=64, blank=False, \
        help_text="Ex: ASP.NET, Joomla, PHP, Java, Apache, etc.")
    environment = models.CharField(max_length=64, blank=False, \
        help_text="Ex: Datacenter, Local server, Cloud, etc.")
    perimeter = models.CharField(max_length=8, blank=False, \
        default='Unspecified', choices=PERIMETER_CHOICES)
    owner = models.CharField(max_length=64, blank=False, \
        help_text="The system's owner or responsible.")
    owner_email = models.EmailField(max_length=64, blank=False)
    vulnerability = models.CharField(max_length=64, blank=False, \
        help_text="The vulnerability name, as reported by the researchers.")
    synopsis = models.CharField(max_length=256, default="", blank=False, \
        help_text="A short description of the vulnerability. Hint: try to focus in the risks associated with the vulnerability.")
    category = models.CharField(max_length=64, blank=True, default="", \
        help_text="Optional. Refer to https://www.owasp.org/index.php/Category:Vulnerability for a list of such categories.")
    identification_date = models.DateField(blank=False, \
        help_text="The date vulnerability was discovered/reported." )
    remediation_deadline = models.DateField(blank=False, \
        help_text="Set a feasible deadline to fix the vulnerability.")
    remediation = models.CharField(max_length=256, blank=True, default="", \
        help_text="Optional. The remediation intented to fix the vulnerability.")
    status = models.CharField(max_length=9, blank=False, choices=STATUS_CHOICES)
    observation = models.CharField(max_length=256, blank=True, default="", \
        help_text="Optional. Any observation pointed by the researcher when comment this vulnerability.")
    risk = models.CharField(max_length=6, choices=RISK_CHOICES)
    risk_vector = models.CharField(default="", blank=True, max_length=64, \
        help_text="Optional. The risk vector as indicated by Risk calculator.")
    risk_acceptance_reason = models.CharField(max_length=256, blank=True, default="", \
        help_text="Only if you decide to accept the associated risks.")
    cvss_score = models.FloatField(default=0, \
        help_text="A numerical score severity. Use the calculator to get it.")
    cvss_vector = models.CharField(default="", blank=True, max_length=64, \
        help_text="Optional. The CVSS 3.0 Vector string, provided by CVSS 3.0 calculator.")
    reporter = models.CharField(max_length=256, default="", blank=True, \
        help_text="Optional. The company, research team or pentester which found the vulnerability.")
    report_file = models.CharField(max_length=64, default="", blank=True, \
        help_text="Optional. The report file for further reference.")
    report_page = models.IntegerField(default=0, blank=True, \
        help_text="Optional. The report page number which describes the vulnerabity.")

    def remediation_time_remaining(self):
        """ Count the remaining time between the remediation deadline and now."""
        """ Notice that, if it returns a negative number, remediation_deadline has
            passed."""
        now = date.today()
        tmp = Vulnerability.objects.get(pk=self.id)
        deadline = tmp.remediation_deadline
        elapsed_time = deadline - now

        if elapsed_time < timedelta(0):
            return(timedelta(0).days)
        else:
            return (elapsed_time.days)

    class Meta:
        verbose_name_plural = "vulnerabilities"
        permissions = (
            ("read", "Can read content"),
        )

