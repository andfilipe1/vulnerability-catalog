/* home-generator.js:
 * Get data and generate the graphical elements to home page.
 */

/* Vulnerability bar: */
// updating the progress-bar elements: //
url = "/catalog/vulnerability/data/json/filter/?field=risk"
var data;

d3.json(url, function(d) {
    data = d;

  //Label:
  //Updated using Django {{ vulnerability_list.count }} at template page.
  for (var i in data) {
    var field = data[i].risk;
    var value = data[i].vulnerabilities;

    // updating the progrees bar attributes:
    var bar = d3.select("#vulnerabilityBar")
        .attr("class", "progress")
        .append("div")
        .attr("class", function() { if (field == "High") {
                                         return "progress-bar bg-danger"
                                     } else if (field == "Medium") {
                                         return "progress-bar bg-warning"
                                     } else if (field == "Low") {
                                         return "progress-bar bg-secondary"
                                   } })
        .style("width", function() { return value + "%"; })
        .append("span") //please check: https://stackoverflow.com/questions/25042697
        .attr("data-toggle", "popover")
        .attr("data-placement", "bottom")
        .attr("data-trigger", "focus") 
        .attr("data-content", value)
        .text(field);
  }

});
/* Loading the popover only form #vulnerabilityBar */
$("#vulnerabilityBar").popover({
  selector: "[data-toggle='popover']",
  container: "body"
});

/* End of Vulnerability bar: */

/* Score bar: */
// updating the progress-bar elements: //
url = "/catalog/vulnerability/data/json/filter/?field=status&countby=risk"
var data;
d3.json(url, function(d) {
  data = d;
  var pendingToSolve = 0;

  // Label:
  var bar = d3.select("#scoreBar")
              .append("h3")
              .text("Score: ");

  for (var i in data) {
    var field = data[i].status;
    var risk = data[i].risk;
    var tmp = Object.values(risk);
    var value = d3.sum(tmp);
    var tip = JSON.stringify(risk).replace(/\"/g, "\'")
                                  .replace(/\:/g, "\: ")
                                  .replace(/\,/g, "\, ");
    // Counting the volume of vuls that requires attention.
    if (field != "Solved" && field != "Risk accepted") {
      pendingToSolve = pendingToSolve + value;
    }

    // updating the progrees bar attributes:
    bar = d3.select("#scoreBar")
        .attr("class", "btn-group-vertical")
        .append("button")
        .attr("class", function() { if (field == "Mitigated") {
                                        return "btn btn-md btn-secondary"
                                    } else if (field == "Not identified") {
                                        return "btn btn-md btn-outline-secondary"
                                    } else if (field == "Notified") {
                                        return "btn btn-md btn-outline-secondary"
                                    } else if (field == "Risk accepted") {
                                        return "btn  btn-md btn-outline-secondary"
                                    } else if (field == "Solved") {
                                        return "btn btn-md btn-success"
                                    } 
                       })
        .attr("data-toggle", "collapse")
        .attr("data-target", "#text" + i)
        .text(field + ": " + value);

    var text = d3.select("#scoreBar")
        .append("div")
        .attr("id", "text" + i)
        .attr("class", "collapse")
        .append("span")
        .text(tip);

  }

/* End of Score bar: */
/* Remaining bar: */

  // Label:
  var bar = d3.select("#remainingBar")
              .append("h4")
              .text("Remaining: ");

  if (pendingToSolve > 10) {
  bar = d3.select("#remainingBar")
              .append("huge")
              .append("span")
              .attr("style","color:DeepPink")
              .append("strong")
              .text(pendingToSolve);
 } else {
  bar = d3.select("#remainingBar")
              .append("h4")
              .append("span")
              .attr("style","color:LightGrey")
              .append("strong")
              .text(pendingToSolve);
 }
  bar = d3.select("#remainingBar")
              .append("span")
              .append("small")
              .text(" vulnerabilities are waiting for solution. Please, check");

  bar = d3.select("#remainingBar")
              .append("ul")
              .append("small")
              .append("strong")
              .append("li")
              .text("Mitigated")
              .append("li")
              .text("Not identified")
              .append("li")
              .text("Notified");

  bar = d3.select("#remainingBar")
              .append("span")
              .append("small")
              .text("categories.");

  bar = d3.select("#scoreBar")
              .append("br");
});
/* End of Summary bar: */


/* Deadline bar: */
url = "/catalog/vulnerability/data/json/filter/?field=status&countby=remediation_deadline"

var data;
var today = new Date();
var count = 0;

// Label:
var bar = d3.select("#deadlineBar")
            .append("h4")
            .text("Deadlines status:");

d3.json(url, function(d) {
  data = d;

  // counting the number of expired remediation_dates:
  for (var i in data) {
    var field = data[i].status;

    if (field != "Solved" && field != "Risk accepted") {
      var deadline = data[i].remediation_deadline;
      var dateArray = Object.keys(deadline);
      var dateValues = Object.values(deadline);

      for (var i = 0; i < dateArray.length + 1; i++) {
        if (Date.parse(dateArray[i]) >= today ) {
          dateArray.splice(i, 1);
          dateValues.splice(i, 1);
        }
      }
      count = count + d3.sum(dateValues);
    }
  }
console.log(count);

  // updating Remediation Bar:
  if (count > 10) {
    bar = d3.select("#deadlineBar")
        .append("span")
        .attr("style","color:DeepPink")
        .append("strong")
        .text(count)
  } else {
    bar = d3.select("#deadlineBar")
        .append("span")
        .attr("style","color:LightGrey")
        .text(count)
 }
  bar = d3.select("#deadlineBar")
      .append("span")
      .text(" unsolved vulnerabilities have missed the remediation deadline.");

});


/* End of Deadline bar: */
