/*
 * Panorama constructor using d3.js, dc.js an crossfilter.js
 */
url = "/catalog/vulnerability/data/panorama/json"

var perimeterChart = dc.rowChart("#perimeterChart"),
    riskChart = dc.pieChart("#riskChart"),
    systemChart = dc.rowChart("#topSystems"),
    categoryChart = dc.rowChart("#topCategories")
    ownersChart = dc.bubbleChart("#systemsAndVulnerabilitiesChart")

d3.json(url, function(error, data) {
  if (error) throw error; 
 
  var ndx = crossfilter(data);
//  var all = ndx.groupAll();

  var perimeterDim = ndx.dimension(function (d) { return d["perimeter"]; })
  var perimeterGroup = perimeterDim.group();

  var riskDim = ndx.dimension(function (d) { return d["risk"]; })
  var riskGroup = riskDim.group();

  var systemDim = ndx.dimension(function (d) { return d["system"]; })
  var systemGroup = systemDim.group();

  var categoryDim = ndx.dimension(function (d) { return d["category"]; });
  var categoryGroup = categoryDim.group();

  perimeterChart
    .x(d3.scale.linear(perimeterDim))
    .dimension(perimeterDim)
    .group(perimeterGroup)
    .elasticX(true);

  riskChart
    .dimension(riskDim)
    .group(riskGroup)
    .legend(dc.legend());
 
  systemChart
    .dimension(systemDim)
    .group(systemGroup)
    .elasticX(true)
    .data(function (group) { return group.top(10); });

  categoryChart
    .dimension(categoryDim)
    .group(categoryGroup)
    .elasticX(true)
    .data(function (group) { return group.top(10); });

  var ownersDim = ndx.dimension(function(d) { return d["owner"]; });
  // http://bl.ocks.org/jun9/5631952
  var statsByOwnerGroup = ownersDim.group().reduce(
    // add
    function (p, v) {
      p.vulnerabity += +1; // Each entry implies only one vul.
      if (v["status"] == "Solved" && v["status"] == "Risk accepted") { 
        p.not_solved = +0; 
      } else {
        p.not_solved += +1;
      }
      return p;
    },
    // remove
    function (p, v) {
      p.vulnerabity -= +1; // Each entry implies only one vul.
      if (v["status"] == "Solved" && v["status"] == "Risk accepted") { 
        p.not_solved = +0;
      } else {
        p.not_solved -= +1;
      }
      return p;
    },
    // init
    function () {
      return {vulnerability: 0, not_solved: 0}
    }
  );

  ownersChart
    .dimension(ownersDim)
    .group(statsByOwnerGroup)
//    .colors(d3.scale.category10())
    .keyAccessor(function (p) { return p.value.vulnerability; })
    .valueAccessor(function (p) { return p.value.not_solved; })
    .radiusValueAccessor(function (p) { return p.value.vulnerability; })
    .x(d3.scale.linear().domain([0, 500]))
    .r(d3.scale.linear().domain([0, 400]))
    .elasticY(true)
    .elasticX(true)
//    .maxBubbleRelativeSize(0.07)

    ownersChart.yAxis().tickFormat(function (s) {
                return s;
            });
    ownersChart.xAxis().tickFormat(function (s) {
                return s;
            });





  dc.renderAll();
});

