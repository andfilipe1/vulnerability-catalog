from django.views.generic import View, ListView, DetailView
from django.core import serializers
from django.http import HttpRequest, HttpResponse
from django.http import JsonResponse

from django.http import HttpResponseRedirect
from django.http import HttpResponseForbidden
from django.http import HttpResponseNotFound

from django.views.generic.edit import FormView, CreateView, \
                                      UpdateView, DeleteView
from catalog.forms import VulnerabilityForm

from django.contrib.auth.decorators import login_required, permission_required
from django.views.decorators.cache import never_cache
from django.utils.decorators import method_decorator

from django.db.models import Count

from .models import Vulnerability

import json
import pandas

decorators = [login_required(login_url='catalog:login')]

@method_decorator(decorators, name='dispatch')
@method_decorator(permission_required('catalog.add_vulnerability', raise_exception=True), name='dispatch')
class JsonFilterView(View):
    model = Vulnerability

    def get_data(request, field=None, countby=None):
        """ Usage: 127.0.0.1:8000/panorama/count/?field=<field_name>"""
        """ Returns a JSON with the counting of the Vulnerability model data."""
        """ field_name is one of the following allowed_fields: """
    
        allowed_fields = ['system', \
                          'owner', \
                          'enviromnent', \
                          'perimeter', \
                          'technology', \
                          'system_type', \
                          'vulnerability', \
                          'category', \
                          'cvss_score', \
                          'identification_date', \
                          'risk', \
                          'remediation_deadline', \
                          'status']
    
        field = request.GET.get('field')
        countby =  request.GET.get('countby')
        if (field or countby) not in allowed_fields:
            return HttpResponseNotFound('<p>Error. Unable to perform this request.</p> \
                                    <p>Please, check the values of \
                                     \'filter\' and \'countby=\' you \
                                    are passing at URL.</p>')

        #### single field match:
        if field and not countby:
            data = Vulnerability.objects \
                                .values(field) \
                                .annotate(vuls=Count('id'))
            data = list(data)

            #### Generate json result properly:
            result = dict()
            for i in data:
                if i[field] not in result.keys():
                    result[i[field]] = {'vuls':i['vuls']}

            result = json.dumps(result)
            return HttpResponse(result, content_type='application/json')
    
        #### double field match:
        if field and countby:
            data = Vulnerability.objects \
                                .values(field, countby) \
                                .annotate(vuls=Count(countby)) 
            data  = list(data)

            #### Generate json result properly:
            result = dict()
            for i in data:
                if i[field] not in result.keys():
                    result[str(i[str(field)])] = \
                        {str(countby):{str(i[str(countby)]): i['vuls']}}
                else:
                    tmp = result[i[field]]    
                    tmp[str(countby)].update({str(i[str(countby)]):i['vuls']})
                    result[str(i[str(field)])] = tmp

            tmp = list()
            #### Now putting it in a d3-affordable format:
            for i in result.items():
                tmp.append({field:i[0],countby:i[1][countby]})

            result = json.dumps(tmp)
            return HttpResponse(result, content_type='application/json')

    
@method_decorator(decorators, name='dispatch')
@method_decorator(permission_required('catalog.add_vulnerability', raise_exception=True), name='dispatch')
class AddVulnerabilityView(ListView):
    model = Vulnerability

    def add_json(HttpRequest):
    ### Receives a json vulnerability entry and add it into the database:

        if HttpRequest.user.is_authenticated:
            if HttpRequest.method == 'POST':
                if vulnerabilityForm.is_valid():
                    data = HttpRequest.POST.copy() # since it is immutable.
                    data = data.dict()
                    data = json.dumps(data) 
                    return HttpResponse(data, content_type='application/json')
        else:
            return HttpResponseForbidden()

@method_decorator(decorators, name='dispatch')
class JsonDataView(ListView):
    model = Vulnerability

    def dump_database(HttpRequest):
    ### catalog/vulnerability/data/json/dumpdatabase:
    ### Returns all database in the same format required to backup/import it.

        if HttpRequest.user.is_authenticated:
            qs = list(Vulnerability.objects.all())
            qs = serializers.serialize('json', qs)
            return HttpResponse(qs, content_type='application/json')
        else:
            return HttpResponseForbidden()

@method_decorator(decorators, name='dispatch')
class JsonDetailView(DetailView):
    ### An rendered template to show a given vulnerability in detail.
    model = Vulnerability

    def result(HttpRequest, num):
        if HttpRequest.user.is_authenticated:
            qs = Vulnerability.objects.get(pk=num)
            qs = serializers.serialize('json', [qs])
            return HttpResponse(qs, content_type='application/json')
        else:
            return HttpResponseForbidden()

@method_decorator(decorators, name='dispatch')
class RawDataView(ListView):
### catalog/rawdata/?system=1&risk=2 to get a json with the parametes & values
    model = Vulnerability

    def rawdata(HttpRequest):
        if HttpRequest.user.is_authenticated:
            allowed_parameters = ['system', \
                                  'owner', \
                                  'environment', \
                                  'perimeter', \
                                  'technology', \
                                  'system_type', \
                                  'category', \
                                  'identification_date', \
                                  'risk', \
                                  'remediation_deadline', \
                                  'status']
    
    
            parameters = list(HttpRequest.GET)
    
            result = dict()
    
            for p in parameters:
                if p in allowed_parameters:
                    result[p] = HttpRequest.GET[p]
    
    
            return JsonResponse(result)
        else:
            return HttpResponseForbidden()

