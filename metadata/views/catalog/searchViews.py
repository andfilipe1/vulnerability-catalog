from django.views.generic import View
from django.core import serializers
from django.http import HttpRequest, HttpResponse

from django.http import HttpResponseForbidden
from django.http import HttpResponseNotFound

import json
import shlex

from .models import Vulnerability

class SearchView(View):
    model = Vulnerability

    def get_data(HttpRequest, q=None):
        if not HttpRequest.user.is_authenticated:
            return HttpResponseForbidden()

        search_string = HttpRequest.POST.get('q')
        if not search_string:
            return HttpResponseNotFound("No results found.")

        #### Parsing data to enable complex search filter:
        search_dict = dict() #{key, value} from search_string, e.g risk=low.
        default_search_dict = dict() #if no key=value be found.
        words = shlex.split(search_string) ## each word in search string.
        default_search = ['vulnerability__contains', \
                          'synopsis__contains', \
                          'owner__contains'] 
 
        #### Constructing the search_dict to host all search requests:
        for i in words:
            if "=" in i: #### if it is a keyword search:
                tmp = i.split("=")  
                search_dict[tmp[0]] = tmp[1]
            else: #### if it is just a word to search:
                for j in default_search:
                    default_search_dict[j] = i
  
        #### Creating Django query:
        qs = Vulnerability.objects.filter(**search_dict)
        #### If we have fields without key=value format, merge all QS:
        if len(default_search_dict.items()) > 0:
            for i in default_search_dict:
                newqs = qs | Vulnerability.objects.filter(**default_search_dict)
        return HttpResponse(qs)
