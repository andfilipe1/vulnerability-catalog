from django.views.generic import TemplateView
from django.http import HttpRequest, HttpResponse

from django.http import HttpResponseForbidden

from django.template import RequestContext
from django.shortcuts import render

from django.db.models import Q

import shlex

from .models import Vulnerability

class SearchView(TemplateView):
    model = Vulnerability
    template_name = 'catalog/search.html'

    def get_data(HttpRequest):
        if not HttpRequest.user.is_authenticated:
            return HttpResponseForbidden()

        search_string = HttpRequest.POST.get('q')
        if not search_string:
            #### Return a null Query set:
            qs = Vulnerability.objects.none()
            return render(HttpRequest, \
                          'catalog/search.html', \
                          {'vulnerability_list':qs})

        #### Parsing data to enable complex search filter:
        #### All lookuptyped searches parsed as dicts.
        lookuptype_search_list = list() 
        #### All non lookuptyped searches parsed as dicts.
        ordinary_search_list = list() 
        wordlist = shlex.split(search_string) ## Each word in search string.
        #### If search_string is not in the field__lookuptype=value format, 
        #### search will be performed only in the following fields:
        default_search = ['vulnerability__icontains', \
                          'owner__icontains', \
                          'system__icontains'] 
         
        #### Django allowed lookuptype: 
        #### https://goo.gl/nz8SUo
        allowed_lookuptype = ['exact', 'iexact', 'contains', 'icontains', 'in', 'gt', 'gte', 'lt', 'lte', 'startswith', 'istartswith', 'endswith', 'iendswith', 'range', 'date', 'year', 'month', 'day', 'week', 'week_day', 'quarter', 'time', 'hour', 'minute', 'second', 'isnull', 'regex', 'iregex']

        #### All fields in models.py
        #### https://goo.gl/JZP36F
        #### https://goo.gl/B2PMUb
        allowed_fields = [i.name for i in Vulnerability._meta.get_fields()]

        #### Sanitizing and constructing the search_list for all search words:
        for word in wordlist:
            #### if it _is_ a lookuptyped (field__lookuptype=value) search:
            if ("=" and "__") in word:
                tmp = word.split("=") #tmp[0]="field__lookuptype",tmp[1]="value"
                if len(tmp) == 2: #Check if only 1 "==" was passed.
                    value = tmp[1]
                    lookuptype = tmp[0].lower() 
                else:
                    value = ""
                tmp = lookuptype.split("__") #tmp[0]=field, tmp[1]=lookuptype 
                if len(tmp) == 2: #Check if only 1 "__" was passed.
                    field = tmp[0].lower()
                    lookuptype = tmp[1].lower()
                else:
                    field = ""
                    lookuptype = ""
                if (field not in allowed_fields) or \
                   (lookuptype not in allowed_lookuptype):
                    # Preventing filter misuse
                    qs = Vulnerability.objects.none()
                    return render(HttpRequest, \
                                  'catalog/search.html', \
                                  {'vulnerability_list':qs})
                else: # Filter was passed right: filter__lookuptype=field
                  lookuptype_search_list.append({lookuptype:value}) 
            else: #### it is just an ordinary word to search:
                for lookuptype in default_search:
                    ordinary_search_list.append({lookuptype:word})
        
        if (len(lookuptype_search_list) or len(ordinary_search_list)) > 0:         
            #### Refining the query set: https://goo.gl/Je2sLs
            #### Non lookuptyped fields as an OR and lookuptyped as an AND:
            if (len(lookuptype_search_list) and len(ordinary_search_list)) > 0:

                #### The OR filter: 
                ordinary_filter = Q()
                tmpdict = dict()
                for i in ordinary_search_list:
                    tmpdict.update(i)
                for i in tmpdict:
                    ordinary_filter |= Q(**{i:tmpdict[i]})
               
                #### The AND filter on the OR filter: 
                qs_lookuptype = Vulnerability.objects.filter(ordinary_filter) 
                for i in lookuptype_search_list:
                    qs_lookuptype = qs_lookuptype.filter(**i)
                qs = qs_lookuptype

            elif len(ordinary_search_list) > 0:
                q_filter = Q()
                tmpdict = dict()
                for i in ordinary_search_list:
                    tmpdict.update(i)
                for i in tmpdict:
                    q_filter |= Q(**{i:tmpdict[i]})
                
                qs = Vulnerability.objects
                qs = qs.filter(q_filter)

            elif len(lookuptype_search_list) > 0:
                qs = Vulnerability.objects 
                for i in lookuptype_search_list:
                    qs = qs.filter(**i)

            qs = qs.order_by('-identification_date')
            return render(HttpRequest, \
                          'catalog/search.html', \
                          {'vulnerability_list':qs})
            qs = qs.order_by('-identification_date')
        else:
            qs = Vulnerability.objects.none()
            qs = qs_ordinary
            return render(HttpRequest, \
                          'catalog/search.html', \
                          {'vulnerability_list':qs})
