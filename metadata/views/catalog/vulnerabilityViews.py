from django.views import generic
from django.core import serializers
from django.http import HttpResponse
from django.http import JsonResponse

from django.http import HttpResponseRedirect
from django.http import HttpResponseForbidden

from django.views.generic.edit import FormView
from catalog.forms import AddVulnerabilityForm


from .models import Vulnerability

class AddView(FormView):
    ### Template to add a vulnerability
    template_name = 'catalog/add.html'
    form_class = AddVulnerabilityForm
    success_url = '/catalog/'

class AddVulnerabilityView(generic.ListView):
    model = Vulnerability

    def add_json(request, data):
    ### Receives a json vulnerability entry and add it into the database:
        data = request.data
        return HttpResponse(data, content_type='application/json')

class JsonDataView(generic.ListView):
    model = Vulnerability

    def dump_database(request):
    ### catalog/vulnerability/data/json/dumpdatabase:
    ### Returns all database in the same format required to backup/import it.

        if request.user.is_authenticated:
            qs = list(Vulnerability.objects.all())
            qs = serializers.serialize('json', qs)
            return HttpResponse(qs, content_type='application/json')
        else:
            return HttpResponseForbidden(result)

class JsonDetailView(generic.DetailView):
    ### An rendered template to show a given vulnerability in detail.
    model = Vulnerability

    def result(request, num):
        if request.user.is_authenticated:
            qs = Vulnerability.objects.get(pk=num)
            qs = serializers.serialize('json', [qs])
            return HttpResponse(qs, content_type='application/json')
        else:
            return HttpResponseForbidden(result)

class RawDataView(generic.ListView):
### catalog/rawdata/?system=1&risk=2 to get a json with the parametes & values
    model = Vulnerability

    def rawdata(request):
        if request.user.is_authenticated:
            allowed_parameters = ['system', \
                                  'owner', \
                                  'environment', \
                                  'perimeter', \
                                  'technology', \
                                  'system_type', \
                                  'category', \
                                  'identification_date', \
                                  'risk', \
                                  'remediation_deadline', \
                                  'status']
    
    
            parameters = list(request.GET)
    
            result = dict()
    
            for p in parameters:
                if p in allowed_parameters:
                    result[p] = request.GET[p]
    
    
            return JsonResponse(result)
        else:
            return HttpResponseForbidden(result)

