from django.views import generic
from django.core import serializers
from django.http import HttpRequest, HttpResponse
from django.http import JsonResponse

from django.http import HttpResponseRedirect
from django.http import HttpResponseForbidden

from django.views.generic.edit import FormView, CreateView, \
                                      UpdateView, DeleteView
from catalog.forms import VulnerabilityForm

from django.contrib.auth.decorators import login_required
from django.views.decorators.cache import never_cache
from django.utils.decorators import method_decorator

from .models import Vulnerability

import json


decorators = [login_required(login_url='catalog:login')]

@method_decorator(decorators, name='dispatch')
class CreateVulnerability(CreateView):
    ### Template to add a vulnerability
    form_class = VulnerabilityForm

    template_name = 'catalog/add.html'
    success_url = '/catalog/vulnerability/data/json/dumpdatabase'

#@method_decorator(decorators, name='dispatch')
class UpdateVulnerability(UpdateView):
    ### Template to add a vulnerability
    model = Vulnerability

    template_name = 'catalog/update.html'
    fields = '__all__'
    success_url = '/catalog/vulnerability/data/catalog'

@method_decorator(decorators, name='dispatch')
class DeleteVulnerability(DeleteView):
    ### Template to add a vulnerability
    model = Vulnerability
    template_name = 'catalog/delete.html'
    success_url = '/catalog/vulnerability/data/catalog'


@method_decorator(decorators, name='dispatch')
class AddVulnerabilityView(generic.ListView):
    model = Vulnerability

    def add_json(HttpRequest):
    ### Receives a json vulnerability entry and add it into the database:

        if HttpRequest.user.is_authenticated:
            if HttpRequest.method == 'POST':
                if vulnerabilityForm.is_valid():
                    data = HttpRequest.POST.copy() # since it is immutable.
                    data = data.dict()
                    data = json.dumps(data) 
                    return HttpResponse(data, content_type='application/json')
        else:
            return HttpResponseForbidden()

@method_decorator(decorators, name='dispatch')
class JsonDataView(generic.ListView):
    model = Vulnerability

    def dump_database(HttpRequest):
    ### catalog/vulnerability/data/json/dumpdatabase:
    ### Returns all database in the same format required to backup/import it.

        if HttpRequest.user.is_authenticated:
            qs = list(Vulnerability.objects.all())
            qs = serializers.serialize('json', qs)
            return HttpResponse(qs, content_type='application/json')
        else:
            return HttpResponseForbidden()

@method_decorator(decorators, name='dispatch')
class JsonDetailView(generic.DetailView):
    ### An rendered template to show a given vulnerability in detail.
    model = Vulnerability

    def result(HttpRequest, num):
        if HttpRequest.user.is_authenticated:
            qs = Vulnerability.objects.get(pk=num)
            qs = serializers.serialize('json', [qs])
            return HttpResponse(qs, content_type='application/json')
        else:
            return HttpResponseForbidden()

@method_decorator(decorators, name='dispatch')
class RawDataView(generic.ListView):
### catalog/rawdata/?system=1&risk=2 to get a json with the parametes & values
    model = Vulnerability

    def rawdata(HttpRequest):
        if HttpRequest.user.is_authenticated:
            allowed_parameters = ['system', \
                                  'owner', \
                                  'environment', \
                                  'perimeter', \
                                  'technology', \
                                  'system_type', \
                                  'category', \
                                  'identification_date', \
                                  'risk', \
                                  'remediation_deadline', \
                                  'status']
    
    
            parameters = list(HttpRequest.GET)
    
            result = dict()
    
            for p in parameters:
                if p in allowed_parameters:
                    result[p] = HttpRequest.GET[p]
    
    
            return JsonResponse(result)
        else:
            return HttpResponseForbidden()

