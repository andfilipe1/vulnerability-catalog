########
#### setup.py: script to build and help developent of the Vulnerability catalog.
#### Date: 2018-02-18
#### Version: 1.0
#### Author: Daniel Avelino https://daavelino.github.io
########

import platform
import sys
import pprint
import shutil
from pathlib import Path
import os

global MINIMAL_PYTHON_VERSION
global MINIMAL_DJANGO_VERSION
global PROJECT_NAME
global APP_NAME

MINIMAL_PYTHON_VERSION = (3,0)
MINIMAL_DJANGO_VERSION = (2,0)
PROJECT_NAME="base"
APP_NAME="catalog"

######## System properties:
def get_environment():
    '''Returns a dictionary with relevant information about OS environment'''
    env = dict()
    env['system'] = platform.system()

    if env['system'] == 'Linux':
        env['system version'] = platform.linux_distribution()
    
    if env['system'] == 'Windows':
        env['system version'] = platform.linux_distribution()

    return(env)

def check_parameters():
    allowed_params = {
        'help': "Prints a help message.",
        'templates': "updates project's Templates only.",
        'urlsviews': "updates project' Urls and Views.",
        'build': "setup and builds the project from the scratch.",
        'loadenv': "creates a functional Python's Virtual Environment."
    }

    if len(sys.argv) == 2: # one and only one parameter has to be passed.
        param = sys.argv[1] # Because argv[0] is the file name.
    else:
        print("\nUsage:", sys.argv[0], "<options>, where <options> are:\n")
        pprint.pprint(allowed_params)
        print("\nExiting.")
        sys.exit(1)

def load_venv():
    target = Path('./venv')
    if not target.is_dir():
        os.makedirs(target)
        os.system('python3 -m venv venv')

    print("Please type:\n\n    source venv/bin/activate\n\n \
          to load Python Virtual Env.")
    sys.exit(1)

def check_system_reqs():
    '''It will not run until all dependencies have been filled'''
    #### Checking Python version:
    python_version = sys.version_info
    if python_version < MINIMAL_PYTHON_VERSION:
        print("\n[Warning]    Missing Python " \
              + str(MINIMAL_PYTHON_VERSION[0]) + "." \
              + str(MINIMAL_PYTHON_VERSION[1]) \
              + " (or greater) version.\n")
        print("Please, upgrade Python first.\nExiting.\n")
        sys.exit(1)

    #### Check if pip is installed:
    try:
        import pip
    except ImportError:
        print("\n[Warning]    Missing pip.\n")
        print("Please, install it first (by using pip3 \
              install django, for instance).\nExiting.\n")
        sys.exit(1)


    #### Check if Django is installed:
    try: 
        from django.core.management import execute_from_command_line
    except ImportError:
        print("\n[Warning]    Missing django-admin.\n")
        print("Please, install it first.\nExiting.\n")
        sys.exit(1)

    #### Check Django version:
    import django
    django_version = tuple()
    tmp = django.get_version().split('.')
    for i in tmp:
        django_version = django_version + (int(i),)
        
    if django_version < MINIMAL_DJANGO_VERSION:
        print("\n[Warning]    Missing Django " \
              + str(MINIMAL_DJANGO_VERSION[0]) + "." \
              + str(MINIMAL_DJANGO_VERSION[1]) \
              + " (or greater) version.\n")
        print("Please, upgrade Python first.\nExiting.\n")
        sys.exit(1)

def cleaning_old_stuff():
    '''Cleaning projects old files into directory'''
    target = Path(PROJECT_NAME)
    if target.is_dir():
        shutil.rmtree(target)


######## End of System properties.

######## Djngo properties:
def start_django_project():
    '''Builds the project.'''

    #### Starting project creation:
    os.system('django-admin startproject' + ' ' + PROJECT_NAME)
    os.chdir(PROJECT_NAME)

    #### Introducing APP_NAME into the project:
    os.system('python3 manage.py startapp' + ' ' + APP_NAME)



get_environment()
check_parameters()
#load_venv()
check_system_reqs()
cleaning_old_stuff()
start_django_project()
